// Code generated by protoc-gen-go.
// source: railgun/protodefine/tcpnet/tcp.proto
// DO NOT EDIT!

/*
Package bs_tcp is a generated protocol buffer package.

It is generated from these files:
	railgun/protodefine/tcpnet/tcp.proto

It has these top-level messages:
	TCPTransferMsg
	TCPSessionCome
	TCPSessionClose
	TCPSessionKick
*/
package bs_tcp

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import bs_types "railgun/protodefine/mytype"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type CMDID_Tcp int32

const (
	CMDID_Tcp_IDUnknow          CMDID_Tcp = 0
	CMDID_Tcp_IDTCPTransferMsg  CMDID_Tcp = 1
	CMDID_Tcp_IDTCPSessionCome  CMDID_Tcp = 2
	CMDID_Tcp_IDTCPSessionClose CMDID_Tcp = 3
	CMDID_Tcp_IDTCPSessionKick  CMDID_Tcp = 4
	CMDID_Tcp_IDLast            CMDID_Tcp = 100
)

var CMDID_Tcp_name = map[int32]string{
	0:   "IDUnknow",
	1:   "IDTCPTransferMsg",
	2:   "IDTCPSessionCome",
	3:   "IDTCPSessionClose",
	4:   "IDTCPSessionKick",
	100: "IDLast",
}
var CMDID_Tcp_value = map[string]int32{
	"IDUnknow":          0,
	"IDTCPTransferMsg":  1,
	"IDTCPSessionCome":  2,
	"IDTCPSessionClose": 3,
	"IDTCPSessionKick":  4,
	"IDLast":            100,
}

func (x CMDID_Tcp) String() string {
	return proto.EnumName(CMDID_Tcp_name, int32(x))
}
func (CMDID_Tcp) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type TCPTransferMsg struct {
	Base       *bs_types.BaseInfo `protobuf:"bytes,1,opt,name=base" json:"base,omitempty"`
	DataKindId uint32             `protobuf:"varint,2,opt,name=data_kind_id,json=dataKindId" json:"data_kind_id,omitempty"`
	DataSubId  uint32             `protobuf:"varint,3,opt,name=data_sub_id,json=dataSubId" json:"data_sub_id,omitempty"`
	Data       []byte             `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *TCPTransferMsg) Reset()                    { *m = TCPTransferMsg{} }
func (m *TCPTransferMsg) String() string            { return proto.CompactTextString(m) }
func (*TCPTransferMsg) ProtoMessage()               {}
func (*TCPTransferMsg) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *TCPTransferMsg) GetBase() *bs_types.BaseInfo {
	if m != nil {
		return m.Base
	}
	return nil
}

type TCPSessionCome struct {
	Base *bs_types.BaseInfo `protobuf:"bytes,1,opt,name=base" json:"base,omitempty"`
}

func (m *TCPSessionCome) Reset()                    { *m = TCPSessionCome{} }
func (m *TCPSessionCome) String() string            { return proto.CompactTextString(m) }
func (*TCPSessionCome) ProtoMessage()               {}
func (*TCPSessionCome) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *TCPSessionCome) GetBase() *bs_types.BaseInfo {
	if m != nil {
		return m.Base
	}
	return nil
}

type TCPSessionClose struct {
	Base *bs_types.BaseInfo `protobuf:"bytes,1,opt,name=base" json:"base,omitempty"`
}

func (m *TCPSessionClose) Reset()                    { *m = TCPSessionClose{} }
func (m *TCPSessionClose) String() string            { return proto.CompactTextString(m) }
func (*TCPSessionClose) ProtoMessage()               {}
func (*TCPSessionClose) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *TCPSessionClose) GetBase() *bs_types.BaseInfo {
	if m != nil {
		return m.Base
	}
	return nil
}

type TCPSessionKick struct {
	Base *bs_types.BaseInfo `protobuf:"bytes,1,opt,name=base" json:"base,omitempty"`
}

func (m *TCPSessionKick) Reset()                    { *m = TCPSessionKick{} }
func (m *TCPSessionKick) String() string            { return proto.CompactTextString(m) }
func (*TCPSessionKick) ProtoMessage()               {}
func (*TCPSessionKick) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *TCPSessionKick) GetBase() *bs_types.BaseInfo {
	if m != nil {
		return m.Base
	}
	return nil
}

func init() {
	proto.RegisterType((*TCPTransferMsg)(nil), "bs.tcp.TCPTransferMsg")
	proto.RegisterType((*TCPSessionCome)(nil), "bs.tcp.TCPSessionCome")
	proto.RegisterType((*TCPSessionClose)(nil), "bs.tcp.TCPSessionClose")
	proto.RegisterType((*TCPSessionKick)(nil), "bs.tcp.TCPSessionKick")
	proto.RegisterEnum("bs.tcp.CMDID_Tcp", CMDID_Tcp_name, CMDID_Tcp_value)
}

func init() { proto.RegisterFile("railgun/protodefine/tcpnet/tcp.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 303 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x8c, 0x91, 0x41, 0x4b, 0xfb, 0x30,
	0x18, 0xc6, 0xff, 0xdd, 0xca, 0xf8, 0xef, 0xdd, 0xd4, 0x18, 0x14, 0x86, 0x07, 0x19, 0x43, 0x86,
	0x78, 0xd8, 0x40, 0x2f, 0x7a, 0x75, 0xbd, 0x84, 0x39, 0x90, 0xad, 0x9e, 0x4b, 0xda, 0xa4, 0x23,
	0x74, 0x4b, 0x4a, 0x93, 0x22, 0xbb, 0xf8, 0x11, 0xfc, 0xcc, 0x26, 0x11, 0x64, 0x15, 0x0f, 0xbd,
	0x24, 0x79, 0x9f, 0xf7, 0xf7, 0x24, 0x4f, 0x12, 0xb8, 0xa9, 0xa8, 0xd8, 0x6d, 0x6b, 0x39, 0x2f,
	0x2b, 0x65, 0x14, 0xe3, 0xb9, 0x90, 0x7c, 0x6e, 0xb2, 0x52, 0x72, 0xe3, 0xa6, 0x99, 0x97, 0x71,
	0x2f, 0xd5, 0x33, 0x5b, 0x5d, 0x4d, 0xff, 0xa2, 0xf7, 0x07, 0x73, 0x28, 0xad, 0xc9, 0x0e, 0xfa,
	0x9b, 0x9f, 0x7c, 0x06, 0x70, 0x1a, 0x2f, 0x5e, 0xe3, 0x8a, 0x4a, 0x9d, 0xf3, 0x6a, 0xa5, 0xb7,
	0x78, 0x0a, 0x61, 0x4a, 0x35, 0x1f, 0x05, 0xe3, 0xe0, 0x76, 0x70, 0x8f, 0x67, 0x6e, 0x47, 0xef,
	0x78, 0xb6, 0x2a, 0x91, 0xb9, 0x5a, 0xfb, 0x3e, 0x1e, 0xc3, 0x90, 0x51, 0x43, 0x93, 0x42, 0x48,
	0x96, 0x08, 0x36, 0xea, 0x58, 0xfe, 0x64, 0x0d, 0x4e, 0x5b, 0x5a, 0x89, 0x30, 0x7c, 0x0d, 0x03,
	0x4f, 0xe8, 0x3a, 0x75, 0x40, 0xd7, 0x03, 0x7d, 0x27, 0x6d, 0xea, 0xd4, 0xf6, 0x31, 0x84, 0xae,
	0x18, 0x85, 0xb6, 0x31, 0x5c, 0xfb, 0xf5, 0xe4, 0xd1, 0xe7, 0xd9, 0x70, 0xad, 0x85, 0x92, 0x0b,
	0xb5, 0xe7, 0x6d, 0xf3, 0x4c, 0x9e, 0xe0, 0xec, 0xc8, 0xb9, 0x53, 0xba, 0xbd, 0xb5, 0x71, 0xe8,
	0x52, 0x64, 0x45, 0x5b, 0xe7, 0xdd, 0x07, 0xf4, 0x17, 0xab, 0x88, 0x44, 0x49, 0x9c, 0x95, 0x78,
	0x08, 0xff, 0x49, 0xf4, 0x26, 0x0b, 0xa9, 0xde, 0xd1, 0x3f, 0x7c, 0x01, 0x88, 0x44, 0xcd, 0xb7,
	0x45, 0xc1, 0x8f, 0x7a, 0x74, 0x43, 0xd4, 0xc1, 0x97, 0x70, 0xde, 0x50, 0x5d, 0x7a, 0xd4, 0xfd,
	0x0d, 0xbb, 0x64, 0x28, 0xc4, 0x00, 0x3d, 0x12, 0xbd, 0x50, 0x6d, 0x10, 0x4b, 0x7b, 0xfe, 0x1b,
	0x1f, 0xbe, 0x02, 0x00, 0x00, 0xff, 0xff, 0xb1, 0xf1, 0xcd, 0xd6, 0x1e, 0x02, 0x00, 0x00,
}
