syntax = "proto3";

import "railgun/protodefine/mytype/types.proto";

package bs.appframe;

enum CMDID_AppFrame{
	IDUnknow = 0;	//保留
	/// Gate客户端的用户关联信息 Online/Login---->Gate
	//目前主要是Online 发送到Gate,
	//表示连接到Gate的某个客户端连接是否关联了某个用户
	IDGateClientAuth=1;				
	///Gate客户端的心跳信息 Gate-->Online
	//定时或者连接断开时，发送到Online,
	//Online 用来判断 某用户的连接是否断开，
	//是否还在线
	IDGateSingleConnectPulse=2;
	///用户上线
	//主要是Online 用来告之其他app,如财富、比赛、列表、任务等等，
	//某个用户上线了，或者重新上线了
	//对于比赛服务器来说，需要客户端主动发送
	IDUserOnlineReq=3;	
	//表示服务器是否允许该用户进入到此
	//或者比赛服务器告诉给Online 说，某用户已经离开了该房间
	//暂时同时使用这样一个报文，在以后可以根据需要定义新的报文
	IDUserOnlineRsp=4;	
	IDUserOffline=5;			//玩家离开了，一般由Online 发给其他
	//订阅事件
	//1）用户登录成功
	//2）用户注销
	IDSubscribeReq=6;
	IDUserLeaveMatchNotify=7;	//用户从比赛中离开了
	IDQueryUserInfoReq=9;		///查询用户信息
	IDQueryUserInfoRsp=10;		///查询用户信息回复
	IDChangeFundReq=11;			//变更请求
	IDChangeFundRsp=12;			//变更回复
	IDAppHeartPulse = 13;		//心跳同步
	IDWorkLoadReq=14;			//工作负载查询  
	IDWorkLoadRsp=15;			//工作负载回复
	IDMsgToBatchUsers=16;		//向批量用户发送同一个消息
	IDStopAppReq=17;			//通知APP停止处理报文并关闭请求
	IDStopAppRsp=18;			//通知APP停止处理报文并关闭回复
	//系统消息广播
	IDBroadcastToCenter=19;		//发往中心服务器的广播消息
	IDBroadcastToClient=20;		//发往客户端（即gate)的广播消息

	IDLast=100;	
};


//一般来自于Online 与Login 
//表示Gate的某个连接，用户登录成功，或者注销登录了，或者被顶号登录了
message GateClientAuth{
	enum State{
		AuthSet=0;			//设置用户ID
		AuthClear=1;		//清除用户ID
		AuthClearPassive=2;	//被动清除
	};
	types.BaseInfo base = 1;
	uint64 gate_conn_id=2;
	State auth_state=3;
	uint64 user_id=4;
}


//来自于Gate,表示相关联接在发报文到appss
message GateSingleConnectPulse{
	types.BaseInfo base = 1;
	uint32 net_speed =2;
	bool   is_connectted =3;
	uint64  user_id =4;
	uint64  conn_id =5;
}

message UserOnlineReq{
	enum OnlineType {
		IDUnknow = 0;	//保留
		OL_Online=1;				//上线
		OL_ReOnline=2;				//断线或顶掉上线
	};
	types.BaseInfo base = 1;
	OnlineType online_type=2;
//	types.BaseUserInfo base_info=2;
//	types.ExtraUserInfo extra_info=3;
//	types.UserSessionInfo session_info = 4; 
	uint64  user_id = 5;
};

message UserOnlineRsp{
	enum Result {
		IDUnknow = 0;	//保留
		SUCCESS=1;		//成功
		FAIL=2;			//失败
	};
	types.BaseInfo base = 1;
	Result  req_result=2;	 //0 表示成功
	string  rsp_info=3;    //回复出错时的信息
	uint64  user_id =4;    //关联的用户ID
	//是否是通知，
	//有二种情况，一种
	//是回复，另一种是通知
	bool    is_notify=5;    
	//下面这二项，只有在比赛房间，且成功才有。
	uint64   plan_id =6;
	uint64   match_id =7;

};

message  UserOffline{
   enum OfflineType{
		IDUnknow = 0;	//保留
		OL_Break=3;		//掉线
		OL_OffLine=4;	//离开
		OL_TimeOut=5;	//超时离开
   };
   types.BaseInfo base = 1;
   OfflineType off_type=2;    //掉线、离开类型
   uint64  user_id=3;         //用户ID
};


message QueryUserInfoReq{
	types.BaseInfo base = 1;
	uint64	user_id=2;
	uint64 session_id =3;
};

message QueryUserInfoRsp{

	enum Result{
		IDUnknow = 0;	//保留
		SUCCESS = 1;
		NOT_EXIST = 2;
	}
	types.BaseInfo base = 10;
	uint64 user_id=1;
	uint64 session_id =9;
	Result req_result=2;
	string err_info=3;

//	optional types.BaseUserInfo      base_info=4;
//	optional types.ExtraUserInfo     extra_info=5;
//	optional types.UserSessionInfo   session_info=6;  //连接相关的信息
// 	optional types.GameRecordData    record_data=7;
//	optional types.GameAttData       att_data = 8;

};



message ChangeFundReq{
	types.BaseInfo base = 1;
//	repeated types.FundItem array_change=1;
	uint32 change_reason=2; 	//变更原因
	uint32 game_id=3;			//游戏大类
	uint32 table_id=4;			//所在桌
	uint32 seat_index = 5;		//所有seat
	string note=6;				//注释
}

message ChangeFundRsp{
	types.BaseInfo base = 4;
	uint32 change_result=1;	//变更结果
	string fail_info=2;		//失败原因。
//	repeated types.FundItem array_fund=3; //变化的财富数据
}


enum EventType_Online{
	ETUnknow = 0;	//保留
	ETOnline_Login=1;	//登录    
	ETOnline_Logout=2;	//注销
};

message SubscribeReq{
	enum  Operations
	{
		IDUnknow = 0;	//保留
		SUBSCRIBE = 1;
		CANCEL_SUBSCRIBE = 2;
		CANCEL_ALL = 3;	//取消该APP的所有用户订阅
		SUBSCRIBE_ALL = 4;	//订阅所有用户,list重启时用
	}
	types.BaseInfo base = 3;
	Operations req_type=1;	//是否要取消事件订阅
	repeated uint64 arr_user_id=2;		//需要操作的用户id组
};

message  UserLeaveMatchNotify{
	types.BaseInfo base = 2;
	//如果这个users为空，则表示应当清空这个app所有的在线用户 （比赛）
	repeated uint64  arr_user_id=1;
};

message AppHeartPulse{
	enum PulseType
	{
		IDUnknow = 0;	//保留
		RESTART = 1;	//启动后第一次发心跳
		USUAL = 2;		//平时发送的心跳
	}
	types.BaseInfo base = 5;
	PulseType pulse_data=1;			//同步数据
	uint32 app_id=2;				//发送方的appid
	uint32 app_type=3;				//app类型
	uint64 att_data =4;
}

message  WorkLoadReq{
	types.BaseInfo base = 4;
	uint32 att_data = 1;    //附加参数，请自行使用与分析
	string att_info = 2;    //附加参数2,请自行使用与分析 
	uint32 game_kind = 3;
};

message  WorkLoadRsp{
	types.BaseInfo base = 4;
	uint32  max_load=1;       //最大设计负载
	uint32  current_load=2;   //当前负载
	uint32  game_kind = 3;
};

message MsgToBatchUsers
{
	types.BaseInfo base = 6;
	repeated uint64 array_user_id = 1;	//用户id组
	uint32 data_cmdkind = 2;	//报文大类
	uint32 data_cmdsubid = 3;	//报文小类
	bytes data_buff = 4;	//报文数据	
	uint64 att_sessionid=5;   //关联的session id
};

message StopAppReq
{
	types.BaseInfo base = 3;
	uint32 app_id = 1;
	uint32 app_type = 2;
};

message StopAppRsp
{
	types.BaseInfo base = 3;
	uint32 app_id = 1;
	uint32 app_type = 2;
};

message BroadcastToCenter
{
	types.BaseInfo base = 6;
	string description = 1;
	uint32 game_kind = 2;
	bool is_only_self_kind = 3;	//是否只对同一类游戏广播，如果=true,那么game_kind有效，如果=false,就不根据game_kind广播
};

message BroadcastToClient
{
	types.BaseInfo base = 1;
	uint32 data_cmdkind = 2;	//报文大类
	uint32 data_cmdsubid = 3;	//报文小类
	bytes data_buff = 4;	//报文数据	
};