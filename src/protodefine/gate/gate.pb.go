// Code generated by protoc-gen-go.
// source: protodefine/gate/gate.proto
// DO NOT EDIT!

/*
Package bs_gate is a generated protocol buffer package.

It is generated from these files:
	protodefine/gate/gate.proto

It has these top-level messages:
	PulseReq
	PulseRsp
	TransferData
	AuthInfo
	LoginToken
	HelloReq
	HelloRsp
*/
package bs_gate

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import bs_types "protodefine/mytype"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type CMDID_Gate int32

const (
	CMDID_Gate_IDUnknow       CMDID_Gate = 0
	CMDID_Gate_IDPulseReq     CMDID_Gate = 1
	CMDID_Gate_IDPulseRsp     CMDID_Gate = 2
	CMDID_Gate_IDTransferData CMDID_Gate = 3
	CMDID_Gate_IDAuthInfo     CMDID_Gate = 4
	CMDID_Gate_IDLoginToken   CMDID_Gate = 5
	CMDID_Gate_IDHelloReq     CMDID_Gate = 6
	CMDID_Gate_IDHelloRsp     CMDID_Gate = 7
	CMDID_Gate_IDLast         CMDID_Gate = 100
)

var CMDID_Gate_name = map[int32]string{
	0:   "IDUnknow",
	1:   "IDPulseReq",
	2:   "IDPulseRsp",
	3:   "IDTransferData",
	4:   "IDAuthInfo",
	5:   "IDLoginToken",
	6:   "IDHelloReq",
	7:   "IDHelloRsp",
	100: "IDLast",
}
var CMDID_Gate_value = map[string]int32{
	"IDUnknow":       0,
	"IDPulseReq":     1,
	"IDPulseRsp":     2,
	"IDTransferData": 3,
	"IDAuthInfo":     4,
	"IDLoginToken":   5,
	"IDHelloReq":     6,
	"IDHelloRsp":     7,
	"IDLast":         100,
}

func (x CMDID_Gate) String() string {
	return proto.EnumName(CMDID_Gate_name, int32(x))
}
func (CMDID_Gate) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type HelloRsp_RspFlag int32

const (
	HelloRsp_UNKNOWN       HelloRsp_RspFlag = 0
	HelloRsp_EncryptInfo   HelloRsp_RspFlag = 1
	HelloRsp_AdviceNewGate HelloRsp_RspFlag = 2
	HelloRsp_LoginToken    HelloRsp_RspFlag = 4
)

var HelloRsp_RspFlag_name = map[int32]string{
	0: "UNKNOWN",
	1: "EncryptInfo",
	2: "AdviceNewGate",
	4: "LoginToken",
}
var HelloRsp_RspFlag_value = map[string]int32{
	"UNKNOWN":       0,
	"EncryptInfo":   1,
	"AdviceNewGate": 2,
	"LoginToken":    4,
}

func (x HelloRsp_RspFlag) String() string {
	return proto.EnumName(HelloRsp_RspFlag_name, int32(x))
}
func (HelloRsp_RspFlag) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{6, 0} }

type PulseReq struct {
	Base         *bs_types.BaseInfo `protobuf:"bytes,1,opt,name=base" json:"base,omitempty"`
	MySpeed      uint32             `protobuf:"varint,2,opt,name=my_speed,json=mySpeed" json:"my_speed,omitempty"`
	SpeedData    uint32             `protobuf:"varint,3,opt,name=speed_data,json=speedData" json:"speed_data,omitempty"`
	AttachedData []byte             `protobuf:"bytes,4,opt,name=attached_data,json=attachedData,proto3" json:"attached_data,omitempty"`
}

func (m *PulseReq) Reset()                    { *m = PulseReq{} }
func (m *PulseReq) String() string            { return proto.CompactTextString(m) }
func (*PulseReq) ProtoMessage()               {}
func (*PulseReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *PulseReq) GetBase() *bs_types.BaseInfo {
	if m != nil {
		return m.Base
	}
	return nil
}

type PulseRsp struct {
	Base        *bs_types.BaseInfo `protobuf:"bytes,1,opt,name=base" json:"base,omitempty"`
	SpeedData   uint32             `protobuf:"varint,2,opt,name=speed_data,json=speedData" json:"speed_data,omitempty"`
	AttachdData []byte             `protobuf:"bytes,3,opt,name=attachd_data,json=attachdData,proto3" json:"attachd_data,omitempty"`
}

func (m *PulseRsp) Reset()                    { *m = PulseRsp{} }
func (m *PulseRsp) String() string            { return proto.CompactTextString(m) }
func (*PulseRsp) ProtoMessage()               {}
func (*PulseRsp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *PulseRsp) GetBase() *bs_types.BaseInfo {
	if m != nil {
		return m.Base
	}
	return nil
}

type TransferData struct {
	Base                *bs_types.BaseInfo `protobuf:"bytes,1,opt,name=base" json:"base,omitempty"`
	AttApptype          uint32             `protobuf:"varint,2,opt,name=att_apptype,json=attApptype" json:"att_apptype,omitempty"`
	AttAppid            uint32             `protobuf:"varint,3,opt,name=att_appid,json=attAppid" json:"att_appid,omitempty"`
	DataCmdKind         uint32             `protobuf:"varint,4,opt,name=data_cmd_kind,json=dataCmdKind" json:"data_cmd_kind,omitempty"`
	DataCmdSubid        uint32             `protobuf:"varint,5,opt,name=data_cmd_subid,json=dataCmdSubid" json:"data_cmd_subid,omitempty"`
	Data                []byte             `protobuf:"bytes,6,opt,name=data,proto3" json:"data,omitempty"`
	ReqId               uint32             `protobuf:"varint,7,opt,name=req_id,json=reqId" json:"req_id,omitempty"`
	ClientRemoteAddress string             `protobuf:"bytes,8,opt,name=client_remote_address,json=clientRemoteAddress" json:"client_remote_address,omitempty"`
}

func (m *TransferData) Reset()                    { *m = TransferData{} }
func (m *TransferData) String() string            { return proto.CompactTextString(m) }
func (*TransferData) ProtoMessage()               {}
func (*TransferData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *TransferData) GetBase() *bs_types.BaseInfo {
	if m != nil {
		return m.Base
	}
	return nil
}

type AuthInfo struct {
	Base   *bs_types.BaseInfo `protobuf:"bytes,1,opt,name=base" json:"base,omitempty"`
	UserId uint64             `protobuf:"varint,2,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	Reason uint32             `protobuf:"varint,3,opt,name=reason" json:"reason,omitempty"`
	Info   string             `protobuf:"bytes,4,opt,name=info" json:"info,omitempty"`
}

func (m *AuthInfo) Reset()                    { *m = AuthInfo{} }
func (m *AuthInfo) String() string            { return proto.CompactTextString(m) }
func (*AuthInfo) ProtoMessage()               {}
func (*AuthInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *AuthInfo) GetBase() *bs_types.BaseInfo {
	if m != nil {
		return m.Base
	}
	return nil
}

type LoginToken struct {
	Base       *bs_types.BaseInfo `protobuf:"bytes,1,opt,name=base" json:"base,omitempty"`
	LoginToken uint32             `protobuf:"varint,2,opt,name=login_token,json=loginToken" json:"login_token,omitempty"`
}

func (m *LoginToken) Reset()                    { *m = LoginToken{} }
func (m *LoginToken) String() string            { return proto.CompactTextString(m) }
func (*LoginToken) ProtoMessage()               {}
func (*LoginToken) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *LoginToken) GetBase() *bs_types.BaseInfo {
	if m != nil {
		return m.Base
	}
	return nil
}

type HelloReq struct {
	Base          *bs_types.BaseInfo `protobuf:"bytes,1,opt,name=base" json:"base,omitempty"`
	AdId          uint32             `protobuf:"varint,2,opt,name=ad_id,json=adId" json:"ad_id,omitempty"`
	Others        string             `protobuf:"bytes,3,opt,name=others" json:"others,omitempty"`
	BuilderNo     uint32             `protobuf:"varint,4,opt,name=builder_no,json=builderNo" json:"builder_no,omitempty"`
	GameKind      uint32             `protobuf:"varint,5,opt,name=game_kind,json=gameKind" json:"game_kind,omitempty"`
	ClientVersion string             `protobuf:"bytes,6,opt,name=client_version,json=clientVersion" json:"client_version,omitempty"`
	// =1 表示pc win7 winxp
	// =2 表示ios
	// =3 表示android
	// =4 表示win10
	ClientType uint32 `protobuf:"varint,7,opt,name=client_type,json=clientType" json:"client_type,omitempty"`
}

func (m *HelloReq) Reset()                    { *m = HelloReq{} }
func (m *HelloReq) String() string            { return proto.CompactTextString(m) }
func (*HelloReq) ProtoMessage()               {}
func (*HelloReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *HelloReq) GetBase() *bs_types.BaseInfo {
	if m != nil {
		return m.Base
	}
	return nil
}

type HelloRsp struct {
	Base        *bs_types.BaseInfo `protobuf:"bytes,1,opt,name=base" json:"base,omitempty"`
	RspFlag     uint32             `protobuf:"varint,2,opt,name=rsp_flag,json=rspFlag" json:"rsp_flag,omitempty"`
	GateAddress []string           `protobuf:"bytes,3,rep,name=gate_address,json=gateAddress" json:"gate_address,omitempty"`
	EncryptKey  []byte             `protobuf:"bytes,4,opt,name=encrypt_key,json=encryptKey,proto3" json:"encrypt_key,omitempty"`
	LoginToken  uint32             `protobuf:"varint,5,opt,name=login_token,json=loginToken" json:"login_token,omitempty"`
	// =0 表示最新版本
	// =1 表示有新版本，但当前版本还可以用
	// =2 强制用户更新版本，当前连接会被断开
	VersionResult uint32 `protobuf:"varint,6,opt,name=version_result,json=versionResult" json:"version_result,omitempty"`
	DownUrl       string `protobuf:"bytes,7,opt,name=down_url,json=downUrl" json:"down_url,omitempty"`
}

func (m *HelloRsp) Reset()                    { *m = HelloRsp{} }
func (m *HelloRsp) String() string            { return proto.CompactTextString(m) }
func (*HelloRsp) ProtoMessage()               {}
func (*HelloRsp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *HelloRsp) GetBase() *bs_types.BaseInfo {
	if m != nil {
		return m.Base
	}
	return nil
}

func init() {
	proto.RegisterType((*PulseReq)(nil), "bs.gate.PulseReq")
	proto.RegisterType((*PulseRsp)(nil), "bs.gate.PulseRsp")
	proto.RegisterType((*TransferData)(nil), "bs.gate.TransferData")
	proto.RegisterType((*AuthInfo)(nil), "bs.gate.AuthInfo")
	proto.RegisterType((*LoginToken)(nil), "bs.gate.LoginToken")
	proto.RegisterType((*HelloReq)(nil), "bs.gate.HelloReq")
	proto.RegisterType((*HelloRsp)(nil), "bs.gate.HelloRsp")
	proto.RegisterEnum("bs.gate.CMDID_Gate", CMDID_Gate_name, CMDID_Gate_value)
	proto.RegisterEnum("bs.gate.HelloRsp_RspFlag", HelloRsp_RspFlag_name, HelloRsp_RspFlag_value)
}

func init() { proto.RegisterFile("protodefine/gate/gate.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 741 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x94, 0x54, 0xdb, 0x6e, 0xdb, 0x38,
	0x10, 0x5d, 0x5f, 0x65, 0x8f, 0x2d, 0xaf, 0x96, 0x41, 0x76, 0xbd, 0x1b, 0xec, 0x6e, 0xaa, 0x5e,
	0x50, 0xf4, 0x21, 0x01, 0xd2, 0x2f, 0x70, 0xe3, 0x5e, 0xdc, 0xb4, 0x6e, 0xc1, 0xc4, 0xed, 0xa3,
	0x20, 0x9b, 0xb4, 0x23, 0x58, 0x96, 0x14, 0x51, 0x8e, 0xe1, 0xcf, 0xe8, 0x7b, 0xfb, 0x2f, 0xfd,
	0x97, 0xfe, 0x48, 0x67, 0x48, 0x2a, 0x70, 0xf3, 0x94, 0xbc, 0x08, 0x9a, 0xc3, 0x33, 0x97, 0x33,
	0x33, 0x24, 0x1c, 0x64, 0x79, 0x5a, 0xa4, 0x42, 0xce, 0xa3, 0x44, 0x1e, 0x2f, 0xc2, 0xc2, 0x7c,
	0x8e, 0x34, 0xca, 0x9c, 0xa9, 0x3a, 0x22, 0xf3, 0x9f, 0xff, 0x76, 0x59, 0xab, 0x6d, 0xb1, 0xcd,
	0xe4, 0x31, 0x7d, 0x94, 0x21, 0xfa, 0x5f, 0x2a, 0xd0, 0xfa, 0xb8, 0x8e, 0x95, 0xe4, 0xf2, 0x8a,
	0x3d, 0x81, 0xfa, 0x34, 0x54, 0xb2, 0x5f, 0x39, 0xac, 0x3c, 0xed, 0x9c, 0xb0, 0x23, 0x0c, 0x62,
	0xb8, 0x2f, 0x10, 0x1d, 0x25, 0xf3, 0x94, 0xeb, 0x73, 0xf6, 0x37, 0xb4, 0x56, 0xdb, 0x40, 0x65,
	0x52, 0x8a, 0x7e, 0x15, 0xb9, 0x2e, 0x77, 0x56, 0xdb, 0x73, 0x32, 0xd9, 0xbf, 0x00, 0x1a, 0x0f,
	0x44, 0x58, 0x84, 0xfd, 0x9a, 0x3e, 0x6c, 0x6b, 0x64, 0x88, 0x00, 0x7b, 0x08, 0x6e, 0x58, 0x14,
	0xe1, 0xec, 0xb2, 0x64, 0xd4, 0x91, 0xd1, 0xe5, 0xdd, 0x12, 0x24, 0x92, 0x5f, 0x94, 0x25, 0xa9,
	0xec, 0xce, 0x25, 0xfd, 0x9a, 0xb7, 0x7a, 0x3b, 0xef, 0x03, 0xb0, 0x29, 0x76, 0x0a, 0xeb, 0xf2,
	0x8e, 0xc5, 0x74, 0xd6, 0x6f, 0x55, 0xe8, 0x5e, 0xe4, 0x61, 0xa2, 0xe6, 0x32, 0xd7, 0x3e, 0x77,
	0x4d, 0xfd, 0x3f, 0x50, 0x9c, 0x20, 0xcc, 0x32, 0x3a, 0xb6, 0xb9, 0x01, 0xa1, 0x81, 0x41, 0xd8,
	0x01, 0xb4, 0x2d, 0x21, 0x12, 0xb6, 0x25, 0x2d, 0x73, 0x1c, 0x09, 0xe6, 0x83, 0x4b, 0x15, 0x05,
	0xb3, 0x95, 0x08, 0x96, 0x51, 0x22, 0x74, 0x47, 0x5c, 0xde, 0x21, 0xf0, 0x74, 0x25, 0xce, 0x10,
	0x62, 0x8f, 0xa0, 0x77, 0xc3, 0x51, 0xeb, 0x29, 0x46, 0x69, 0x68, 0x52, 0xd7, 0x92, 0xce, 0x09,
	0x63, 0x0c, 0xea, 0x5a, 0x5b, 0x53, 0x6b, 0xd3, 0xff, 0x6c, 0x1f, 0x9a, 0xb9, 0xbc, 0x0a, 0xd0,
	0xc3, 0xd1, 0x1e, 0x0d, 0xb4, 0x46, 0x82, 0x9d, 0xc0, 0xfe, 0x2c, 0x8e, 0x64, 0x52, 0x04, 0xb9,
	0x5c, 0xa5, 0x85, 0x0c, 0x42, 0x21, 0x72, 0xa9, 0x54, 0xbf, 0x85, 0xac, 0x36, 0xdf, 0x33, 0x87,
	0x5c, 0x9f, 0x0d, 0xcc, 0x91, 0xbf, 0x81, 0xd6, 0x60, 0x5d, 0x5c, 0x92, 0xf0, 0x3b, 0xb7, 0xe6,
	0x2f, 0x70, 0xd6, 0x4a, 0xe6, 0x94, 0x9f, 0xda, 0x52, 0xe7, 0x4d, 0x32, 0xb1, 0x80, 0x3f, 0xa9,
	0xae, 0x50, 0xa5, 0x89, 0xed, 0x87, 0xb5, 0x48, 0x43, 0x84, 0xee, 0xba, 0x09, 0x6d, 0xae, 0xff,
	0xfd, 0x09, 0xc0, 0xbb, 0x74, 0x11, 0x25, 0x17, 0xe9, 0x52, 0x26, 0xf7, 0x99, 0x4a, 0x4c, 0x5e,
	0x41, 0x41, 0x6e, 0xe5, 0x54, 0xe2, 0x9b, 0x40, 0xfe, 0x0f, 0xdc, 0xfc, 0x37, 0x32, 0x8e, 0xd3,
	0xfb, 0x6c, 0xfe, 0x1e, 0x34, 0x42, 0x51, 0xca, 0x71, 0x79, 0x3d, 0x14, 0x46, 0x4c, 0x5a, 0x5c,
	0xca, 0x5c, 0x69, 0x31, 0x6d, 0x6e, 0x2d, 0xda, 0xc9, 0xe9, 0x3a, 0x8a, 0x05, 0x36, 0x20, 0x49,
	0xed, 0x5c, 0xdb, 0x16, 0x19, 0xa7, 0xb4, 0x16, 0x8b, 0x70, 0x25, 0xcd, 0xd4, 0xcd, 0x40, 0x5b,
	0x04, 0xe8, 0x91, 0x3f, 0x86, 0x9e, 0x9d, 0xd0, 0x35, 0x86, 0x8a, 0xb0, 0x51, 0x4d, 0x1d, 0xdb,
	0x35, 0xe8, 0x27, 0x03, 0x92, 0x4a, 0x4b, 0xd3, 0xbb, 0x67, 0x86, 0x0c, 0x06, 0xba, 0x40, 0xc4,
	0xff, 0x5e, 0x2d, 0x55, 0xde, 0xe3, 0x32, 0xe1, 0xfd, 0xce, 0x55, 0x16, 0xcc, 0xe3, 0x70, 0x51,
	0xde, 0x6f, 0xb4, 0x5f, 0xa1, 0x49, 0x17, 0x89, 0xde, 0x95, 0x9b, 0x85, 0xa9, 0x1d, 0xd6, 0xb0,
	0xaa, 0x0e, 0x61, 0x76, 0x51, 0xa8, 0x26, 0x99, 0xcc, 0xf2, 0x6d, 0x56, 0x04, 0x4b, 0xb9, 0xb5,
	0x37, 0x1c, 0x2c, 0x74, 0x26, 0xb7, 0xb7, 0x47, 0xd3, 0xb8, 0x3d, 0x1a, 0x12, 0x6f, 0x55, 0xe3,
	0x7e, 0xaa, 0x75, 0x5c, 0x68, 0xf1, 0x2e, 0x77, 0x2d, 0xca, 0x35, 0x48, 0x65, 0x8a, 0x74, 0x93,
	0x04, 0xeb, 0x3c, 0xd6, 0xca, 0xdb, 0xdc, 0x21, 0x7b, 0x92, 0xc7, 0xfe, 0x5b, 0x70, 0xb8, 0xad,
	0xb8, 0x03, 0xce, 0x64, 0x7c, 0x36, 0xfe, 0xf0, 0x79, 0xec, 0xfd, 0xc6, 0x7e, 0x87, 0xce, 0x4b,
	0x53, 0x08, 0xc9, 0xf5, 0x2a, 0xec, 0x0f, 0x70, 0x07, 0xe2, 0x3a, 0x9a, 0xc9, 0xb1, 0xdc, 0xbc,
	0x46, 0x11, 0x5e, 0x95, 0xf5, 0x76, 0xf7, 0xcd, 0xab, 0x3f, 0xfb, 0x5a, 0x01, 0x38, 0x7d, 0x3f,
	0x1c, 0x0d, 0x03, 0x22, 0xb0, 0x2e, 0xb4, 0x46, 0xc3, 0x49, 0xb2, 0x4c, 0xd2, 0x0d, 0x06, 0x44,
	0xf2, 0x68, 0x58, 0x3e, 0xa0, 0x18, 0x6f, 0xc7, 0x56, 0x19, 0x06, 0x63, 0xd0, 0x1b, 0x0d, 0x77,
	0x9f, 0x15, 0xaf, 0x66, 0x38, 0xe5, 0x5d, 0xf2, 0xea, 0xcc, 0x83, 0xee, 0x68, 0xb8, 0x93, 0xb2,
	0x61, 0x18, 0xe5, 0x72, 0x7a, 0xcd, 0x5d, 0x1b, 0xa3, 0x3a, 0x0c, 0xa0, 0x89, 0x1e, 0xa1, 0x2a,
	0x3c, 0x31, 0x6d, 0xea, 0x87, 0xfc, 0xf9, 0xcf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x04, 0x7f, 0x6b,
	0x7c, 0x10, 0x06, 0x00, 0x00,
}
